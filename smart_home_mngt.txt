Build a Smart Home Management System in C++
Description
Design and implement a smart home system where multiple devices (eg: lights, cameras, thermostats) are controlled via a central application.
The system should support:
- Device registration
- Command execution
- Logging and error handling
- Configuration storage
- Multithreading for real-time updates
- Networking for remote access


Requirements:
    1. OOP
    - Use classes to represent different smart devices.
    - Implement inheritance for differenct device types.
    - Use polymorphism to allow a generic intergace for all device.

    2. Memory Management
    - Manage objects using smart pointers (std::unique_ptr, std::shared_ptr).
    - Prevent memory leaks with proper RAII

    3. Templates and STL
    - Use templates to allow flexibility in device storage.
    - Use STL containers like std::vector, std::map and std::queue.
    - Implement a priority queue (std::priority_queue) for command execution.

    4. Exception handling
    - Implement custom exception classses for error handling.
    - Use try-catch blocks to handle runtime errors.

    5. Multithreading and concurrency
    - Use std::thread for handling multiple device updates in parallel.
    - Protect shared resources using mutexes (std::mutex, std::lock_guard).

    6. File handling and serialization
    - Store configuration in a JSON or XML file using fstream.
    - Implement serialization to save and load device stats.

    7. Networking (Socket and REST API)
    - Implement TCP/UDP communication between client (mobile app) and the smart home system.
    - Optionally, use a REST API (with libraries like cpp-httplib).

    8. Design Patterns
    - Use Singleton for the central manager.
    - Use Observer Pattern for event notifications.

    9. Operator overloading and advanced C++ features
    - Overload operator<< to print device states.
    - Implement move semantics for efficient object management.

Bonus Challenges
Implement machine learning to predict user behavior.
Create a GUI using Qt or ImGui.
Add encryption for secure communication.